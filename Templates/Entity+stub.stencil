import Foundation
import Entity

{% for type in types.all %}
{% if type.kind == "struct" or type.kind == "class" %}
extension {{ type.name }} {
    public static func stub(
        {% for parameter in type.initializers.first.parameters %}
        {% if parameter.typeName.isOptional %}
        {{ parameter.name }}: {{ parameter.typeName }} = nil{% if forloop.last == false %},{% endif %}
        {% elif parameter.typeName.isArray %}
        {{ parameter.name }}: {{ parameter.typeName }} = []{% if forloop.last == false %},{% endif %}
        {% elif parameter.typeName.name == "String" %}
        {{ parameter.name }}: {{ parameter.typeName }} = ""{% if forloop.last == false %},{% endif %}
        {% elif parameter.typeName.name == "Int" or parameter.typeName.name == "Double" or parameter.typeName.name == "Float" %}
        {{ parameter.name }}: {{ parameter.typeName }} = 0{% if forloop.last == false %},{% endif %}
        {% elif parameter.typeName.name == "Bool" %}
        {{ parameter.name }}: {{ parameter.typeName }} = false{% if forloop.last == false %},{% endif %}
        {% elif parameter.typeName.name == "URL" %}
        {{ parameter.name }}: {{ parameter.typeName }} = .init(string: "url")!{% if forloop.last == false %},{% endif %}
        {% else %}
        {{ parameter.name }}: {{ parameter.typeName }} = .stub(){% if forloop.last == false %},{% endif %}
        {% endif %}
        {% endfor%}
    ) -> Self {
        .init(
            {% for parameter in type.initializers.first.parameters %}
            {{ parameter.name }}: {{ parameter.name }}{% if forloop.last == false %},{% endif %}
            {% endfor %}
        )
    }
}
{% elif type.kind == "enum" %}
extension {{ type.name }} {
    public static func stub() -> Self {
        .{{ type.cases.first.name }}{% if type.cases.first.hasAssociatedValue %}(
            {% for associatedValue in type.cases.first.associatedValues %}
            <%# TODO: associatedValue %>
            {% endfor %}
        )
        {% endif%}
    }
}
{% endif %}

{% endfor %}